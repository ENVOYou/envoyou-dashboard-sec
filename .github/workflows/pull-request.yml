name: Pull Request Testing

on:
  pull_request:
    branches: [ main, staging ]

jobs:
  # Unit, Integration, and E2E Tests
  test-suite:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit and integration tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: Unit Tests Coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Enforce Coverage Quality Gates
        run: |
          echo "Checking coverage thresholds..."
          # Read coverage summary
          COVERAGE_FILE="coverage/coverage-summary.json"
          if [ -f "$COVERAGE_FILE" ]; then
            # Extract overall coverage percentage using Node.js for cross-platform compatibility
            OVERALL_COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('$COVERAGE_FILE'));
              console.log(coverage.total.lines.pct);
            ")
            echo "Overall coverage: $OVERALL_COVERAGE%"

            # Check if coverage meets minimum threshold (10%) using Node.js
            MEETS_THRESHOLD=$(node -e "
              const coverage = parseFloat('$OVERALL_COVERAGE');
              const threshold = 10;
              console.log(coverage >= threshold ? 'true' : 'false');
            ")
            
            if [ "$MEETS_THRESHOLD" = "true" ]; then
              echo "✅ Coverage $OVERALL_COVERAGE% meets minimum threshold 10%"
            else
              echo "❌ Coverage $OVERALL_COVERAGE% is below minimum threshold 10%"
              exit 1
            fi
          else
            echo "⚠️ Coverage file not found, skipping coverage check"
          fi

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Build application
        run: npm run build

      - name: Start application for E2E testing
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 1; done'

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance Testing on Vercel Preview
  performance-testing:
    runs-on: ubuntu-latest
    needs: test-suite

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI on Staging
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true  # Don't fail the workflow if Lighthouse fails

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: lhci-reports/
          retention-days: 30